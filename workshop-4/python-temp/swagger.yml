openapi: 3.1.0
info:
  title: LBK Points - Transfer API
  version: 1.1.0
  description: |
    โอนแต้ม, ดูสถานะ, และค้นประวัติ พร้อม CRUD User management
servers:
  - url: http://localhost:3000

tags:
  - name: Hello World
    description: Simple greeting endpoints
  - name: User Management
    description: APIs for managing user data with SQLite database
  - name: Transfers
    description: APIs for transferring points between users

components:
  schemas:
    MembershipLevel:
      type: string
      enum: [BRONZE, SILVER, GOLD, PLATINUM]
    
    TransferStatus:
      type: string
      enum: [pending, processing, completed, failed, cancelled, reversed]

    UserBase:
      type: object
      required:
        - first_name
        - last_name
        - email
      properties:
        first_name:
          type: string
          description: User's first name
          example: สมชาย
        last_name:
          type: string
          description: User's last name
          example: ใจดี
        phone:
          type: string
          nullable: true
          description: User's phone number
          example: "081-234-5678"
        email:
          type: string
          format: email
          description: User's email address (unique)
          example: somchai@example.com

    UserResponse:
      allOf:
        - $ref: '#/components/schemas/UserBase'
        - type: object
          required:
            - id
            - member_since
            - membership_level
            - points
            - created_at
            - updated_at
          properties:
            id:
              type: integer
              description: Unique identifier for the user
              example: 123
            member_since:
              type: string
              format: date-time
              description: Date when user became a member
            membership_level:
              $ref: '#/components/schemas/MembershipLevel'
            points:
              type: integer
              minimum: 0
              description: Current points balance
              example: 1500
            created_at:
              type: string
              format: date-time
              description: Record creation timestamp
            updated_at:
              type: string
              format: date-time
              description: Record last update timestamp

    UserCreate:
      allOf:
        - $ref: '#/components/schemas/UserBase'
        - type: object
          properties:
            membership_level:
              $ref: '#/components/schemas/MembershipLevel'
            points:
              type: integer
              minimum: 0
              description: Current points balance
              example: 100

    UserUpdate:
      allOf:
        - $ref: '#/components/schemas/UserBase'
        - type: object
          properties:
            membership_level:
              $ref: '#/components/schemas/MembershipLevel'
            points:
              type: integer
              minimum: 0
              description: Current points balance
            member_since:
              type: string
              format: date-time
              description: Date when user became a member

    ApiResponse:
      type: object
      required:
        - status
        - message
      properties:
        status:
          type: string
          description: Response status
          example: success
        message:
          type: string
          description: Response message
          example: Operation completed successfully
        data:
          description: Response data

    PointsOperation:
      type: object
      required:
        - points
      properties:
        points:
          type: integer
          description: Points amount
          example: 100
          minimum: 1

    Transfer:
      type: object
      required:
        - idemKey
        - fromUserId
        - toUserId
        - amount
        - status
        - createdAt
        - updatedAt
      properties:
        idemKey:
          type: string
          description: Idempotency key as main reference ID
        transferId:
          type: integer
          nullable: true
          description: Internal system ID (autoincrement)
        fromUserId:
          type: integer
          minimum: 1
          description: Sender user ID
        toUserId:
          type: integer
          minimum: 1
          description: Receiver user ID
        amount:
          type: integer
          minimum: 1
          description: Transfer amount
        status:
          $ref: '#/components/schemas/TransferStatus'
        note:
          type: string
          nullable: true
          maxLength: 512
          description: Transfer note
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
        completedAt:
          type: string
          format: date-time
          nullable: true
          description: Completion timestamp
        failReason:
          type: string
          nullable: true
          description: Failure reason if failed

    TransferCreateRequest:
      type: object
      required:
        - fromUserId
        - toUserId
        - amount
      properties:
        fromUserId:
          type: integer
          minimum: 1
          description: Sender user ID
        toUserId:
          type: integer
          minimum: 1
          description: Receiver user ID
        amount:
          type: integer
          minimum: 1
          description: Amount to transfer
        note:
          type: string
          nullable: true
          maxLength: 512
          description: Transfer note

    TransferCreateResponse:
      type: object
      properties:
        transfer:
          $ref: '#/components/schemas/Transfer'

    TransferGetResponse:
      type: object
      properties:
        transfer:
          $ref: '#/components/schemas/Transfer'

    TransferListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Transfer'
        page:
          type: integer
          minimum: 1
          description: Current page number
        pageSize:
          type: integer
          minimum: 1
          description: Items per page
        total:
          type: integer
          minimum: 0
          description: Total number of items

    ErrorResponse:
      type: object
      required:
        - error
        - message
      properties:
        error:
          type: string
          example: VALIDATION_ERROR
        message:
          type: string
          example: amount must be > 0
        details:
          type: object
          nullable: true
          description: Additional error details

paths:
  /hello:
    get:
      tags: [Hello World]
      summary: Hello World endpoint
      description: Returns a simple hello world message
      responses:
        '200':
          description: Successful response
          content:
            text/plain:
              schema:
                type: string
                example: "Hello World!"

  /hello/health:
    get:
      tags: [Hello World]
      summary: Health check endpoint
      description: Returns application status
      responses:
        '200':
          description: Application is running
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: UP
                  message:
                    type: string
                    example: Application is running successfully
                  port:
                    type: integer
                    example: 3000

  /users:
    get:
      tags: [User Management]
      summary: Get all users
      description: Retrieve a list of all users from the SQLite database
      responses:
        '200':
          description: Successfully retrieved users
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UserResponse'
              example:
                status: success
                message: Users retrieved successfully
                data:
                  - id: 1
                    first_name: สมชาย
                    last_name: ใจดี
                    phone: 081-234-5678
                    email: somchai@example.com
                    member_since: "2024-01-15T10:30:00"
                    membership_level: GOLD
                    points: 1500
                    created_at: "2024-01-15T10:30:00"
                    updated_at: "2024-01-15T10:30:00"
    
    post:
      tags: [User Management]
      summary: Create a new user
      description: Create a new user in the SQLite database
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
            examples:
              complete:
                summary: Example with all user fields
                value:
                  first_name: สมชาย
                  last_name: ใจดี
                  phone: 081-234-5678
                  email: somchai@example.com
                  membership_level: SILVER
                  points: 100
              minimal:
                summary: Example with required fields only
                value:
                  first_name: สมศรี
                  last_name: สุขใจ
                  email: somsri@example.com
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/UserResponse'
        '400':
          description: Invalid input data or email already exists
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: null

  /users/{id}:
    parameters:
      - name: id
        in: path
        required: true
        description: User's unique identifier
        schema:
          type: integer
          format: int64
          example: 1
    
    get:
      tags: [User Management]
      summary: Get user by ID
      description: Retrieve a specific user by their unique identifier from SQLite database
      responses:
        '200':
          description: User found successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/UserResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
    
    put:
      tags: [User Management]
      summary: Update an existing user
      description: Update user information for an existing user in SQLite database
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
            example:
              first_name: สมชาย
              last_name: ใจดี (แก้ไข)
              phone: 081-234-5678
              email: somchai.updated@example.com
              membership_level: GOLD
              points: 2000
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/UserResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
    
    delete:
      tags: [User Management]
      summary: Delete a user
      description: Delete a user from the SQLite database by their ID
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /users/{id}/points/add:
    parameters:
      - name: id
        in: path
        required: true
        description: User ID
        schema:
          type: integer
          example: 1
    
    post:
      tags: [User Management]
      summary: Add points to user
      description: Add points to a user's account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PointsOperation'
      responses:
        '200':
          description: Points added successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/UserResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /users/{id}/points/deduct:
    parameters:
      - name: id
        in: path
        required: true
        description: User ID
        schema:
          type: integer
          example: 1
    
    post:
      tags: [User Management]
      summary: Deduct points from user
      description: Deduct points from a user's account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PointsOperation'
      responses:
        '200':
          description: Points deducted successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/UserResponse'
        '400':
          description: Insufficient points
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /transfers:
    post:
      tags: [Transfers]
      summary: สร้างคำสั่งโอนแต้ม (ระบบจะสร้าง Idempotency-Key ให้)
      description: |
        สร้างรายการโอนแต้มแบบอะตอมมิก ระบบจะ generate `idemKey` (Idempotency-Key)
        และคืนค่าไว้ใช้ติดตามสถานะผ่าน GET /transfers/{id}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransferCreateRequest'
            example:
              fromUserId: 101
              toUserId: 202
              amount: 250
              note: ขอบคุณสำหรับความช่วยเหลือ
      responses:
        '201':
          description: สร้างสำเร็จ
          headers:
            Idempotency-Key:
              description: idemKey ที่ระบบสร้างให้ (ใช้เป็น /transfers/{id})
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransferCreateResponse'
              example:
                transfer:
                  idemKey: "5d1f8c7a-2b5b-4b1f-9f2a-8f50b0a8d9f3"
                  transferId: 9876
                  fromUserId: 101
                  toUserId: 202
                  amount: 250
                  status: completed
                  note: "ขอบคุณสำหรับความช่วยเหลือ"
                  createdAt: "2025-10-16T14:03:12Z"
                  updatedAt: "2025-10-16T14:03:12Z"
                  completedAt: "2025-10-16T14:03:12Z"
        '400':
          description: คำขอไม่ถูกต้อง
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: ความขัดแย้ง (เช่น แต้มไม่พอ)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: ตรวจรูปแบบผ่าน แต่ทำงานต่อไม่ได้ (เช่น โอนให้ตัวเอง)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    
    get:
      tags: [Transfers]
      summary: ค้น/ดูประวัติการโอน (กรองด้วย userId เท่านั้น)
      description: แสดงรายการที่ userId เกี่ยวข้อง (ทั้ง sender และ receiver) พร้อมแบ่งหน้า
      parameters:
        - name: userId
          in: query
          required: true
          description: แสดงเฉพาะรายการที่เกี่ยวข้องกับ userId (ทั้งโอนออกและรับเข้า)
          schema:
            type: integer
            minimum: 1
        - name: page
          in: query
          required: false
          description: หน้าที่ต้องการ (เริ่มที่ 1)
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: pageSize
          in: query
          required: false
          description: จำนวนต่อหน้า (1–200)
          schema:
            type: integer
            minimum: 1
            maximum: 200
            default: 20
      responses:
        '200':
          description: รายการที่พบ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransferListResponse'
              example:
                data:
                  - idemKey: "5d1f8c7a-2b5b-4b1f-9f2a-8f50b0a8d9f3"
                    transferId: 9876
                    fromUserId: 101
                    toUserId: 202
                    amount: 250
                    status: completed
                    createdAt: "2025-10-16T14:03:12Z"
                    updatedAt: "2025-10-16T14:03:12Z"
                    completedAt: "2025-10-16T14:03:12Z"
                  - idemKey: "a8b4f2e0-5562-4f1c-9b62-2a2f2f4c9b10"
                    transferId: 9901
                    fromUserId: 303
                    toUserId: 101
                    amount: 100
                    status: completed
                    createdAt: "2025-10-15T10:00:00Z"
                    updatedAt: "2025-10-15T10:00:00Z"
                    completedAt: "2025-10-15T10:00:00Z"
                page: 1
                pageSize: 20
                total: 2
        '400':
          description: คำขอไม่ถูกต้อง
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              
  /transfers/{id}:
    parameters:
      - name: id
        in: path
        required: true
        description: Transfer ID สำหรับค้นหาสถานะ (เท่ากับ Idempotency-Key ที่ระบบสร้างให้ตอน POST /transfers)
        schema:
          type: string
          minLength: 8
          maxLength: 128
    
    get:
      tags: [Transfers]
      summary: ดูสถานะคำสั่งโอน (ใช้ idemKey เป็น id)
      responses:
        '200':
          description: ข้อมูลรายการโอน
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransferGetResponse'
              example:
                transfer:
                  idemKey: "5d1f8c7a-2b5b-4b1f-9f2a-8f50b0a8d9f3"
                  transferId: 9876
                  fromUserId: 101
                  toUserId: 202
                  amount: 250
                  status: completed
                  note: "ขอบคุณสำหรับช่วยงาน"
                  createdAt: "2025-10-16T14:03:12Z"
                  updatedAt: "2025-10-16T14:03:12Z"
                  completedAt: "2025-10-16T14:03:12Z"
        '404':
          description: ไม่พบข้อมูล
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'